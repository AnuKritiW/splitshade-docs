import{_ as a,c as t,o as i,ae as o}from"./chunks/framework.DmqzXzOt.js";const c=JSON.parse('{"title":"What Are Uniforms?","description":"","frontmatter":{},"headers":[],"relativePath":"uniforms/what-are.md","filePath":"uniforms/what-are.md"}'),r={name:"uniforms/what-are.md"};function s(n,e,l,h,d,m){return i(),t("div",null,e[0]||(e[0]=[o('<h1 id="what-are-uniforms" tabindex="-1">What Are Uniforms? <a class="header-anchor" href="#what-are-uniforms" aria-label="Permalink to &quot;What Are Uniforms?&quot;">​</a></h1><p>Uniforms are special inputs that allow data to be passed from <strong>Splitshade</strong> into your shaders. Uniforms are constant across a single draw call — they don’t change per vertex or fragment.</p><p>They enable your shader to respond to external parameters such as time, mouse position or screen resolution, making it possible to create dynamic, interactive visuals.</p><h2 id="why-uniforms-matter" tabindex="-1">Why Uniforms Matter <a class="header-anchor" href="#why-uniforms-matter" aria-label="Permalink to &quot;Why Uniforms Matter&quot;">​</a></h2><p>Uniforms are the bridge between your shader and the world outside it. For instance:</p><ul><li>Want to adapt visuals to screen size? Use <a href="./iResolution.html"><code>iResolution</code></a>.</li><li>Want to react to user input? Use <a href="./iMouse.html"><code>iMouse</code></a>.</li><li>Want to animate something over time? Use <a href="./iTime.html"><code>iTime</code></a>.</li></ul><p>These values are essential for building interactive and visually responsive effects.</p><h2 id="uniforms-in-splitshade" tabindex="-1">Uniforms in Splitshade <a class="header-anchor" href="#uniforms-in-splitshade" aria-label="Permalink to &quot;Uniforms in Splitshade&quot;">​</a></h2><p><strong>Splitshade</strong> provides a set of built-in uniforms automatically available in every shader:</p><ul><li><a href="./iResolution.html"><code>iResolution</code></a>: Canvas resolution in pixels</li><li><a href="./iMouse.html"><code>iMouse</code></a>: Current mouse coordinates and button state</li><li><a href="./iTime.html"><code>iTime</code></a>: Elapsed time in seconds</li></ul>',10)]))}const f=a(r,[["render",s]]);export{c as __pageData,f as default};
