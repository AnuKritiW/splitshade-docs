import{_ as a,c as t,o as s,ae as o}from"./chunks/framework.DmqzXzOt.js";const p=JSON.parse('{"title":"What are Meshes?","description":"","frontmatter":{},"headers":[],"relativePath":"meshes/what-is.md","filePath":"meshes/what-is.md"}'),r={name:"meshes/what-is.md"};function i(l,e,n,h,d,c){return s(),t("div",null,e[0]||(e[0]=[o('<h1 id="what-are-meshes" tabindex="-1">What are Meshes? <a class="header-anchor" href="#what-are-meshes" aria-label="Permalink to &quot;What are Meshes?&quot;">​</a></h1><p>Meshes allow your shader to render custom geometry instead of the default fullscreen triangle. They provide access to actual vertex data — such as position and color — enabling you to create more complex and meaningful visuals in both 2D and 3D contexts.</p><p>A mesh is a collection of <strong>vertices</strong> and <strong>faces</strong> that define a 2D or 3D object. Each vertex can carry attributes like:</p><ul><li>Position</li><li>Color</li><li>(In future versions: normals, UVs, etc.)</li></ul><h2 id="why-use-meshes" tabindex="-1">Why Use Meshes? <a class="header-anchor" href="#why-use-meshes" aria-label="Permalink to &quot;Why Use Meshes?&quot;">​</a></h2><p>Using a mesh opens up new possibilities in shader design:</p><ul><li>Visualize custom shapes and models</li><li>Enable the use of vertex shaders</li><li>Animate or distort geometry using vertex inputs</li><li>Represent 3D objects, characters, or abstract structures</li></ul><h2 id="attributes-passed-to-shaders" tabindex="-1">Attributes Passed to Shaders <a class="header-anchor" href="#attributes-passed-to-shaders" aria-label="Permalink to &quot;Attributes Passed to Shaders&quot;">​</a></h2><p>When a mesh is provided, vertex data is passed to your <code>WGSL</code> shader as:</p><ul><li><code>@location(0)</code> → <code>vec3&lt;f32&gt;</code> position</li><li><code>@location(1)</code> → <code>vec3&lt;f32&gt;</code> color</li></ul><p>You can access this in your <code>@vertex</code> function and pass it to the fragment stage as needed.</p><h2 id="what-happens-at-runtime" tabindex="-1">What Happens at Runtime <a class="header-anchor" href="#what-happens-at-runtime" aria-label="Permalink to &quot;What Happens at Runtime&quot;">​</a></h2><p>When you upload or select a mesh, Splitshade:</p><ul><li>Parses the <code>.obj</code> file</li><li>Extracts vertex positions and colors</li><li>Passes this data to your vertex shader using WGSL input attributes</li></ul><p>See <a href="./usage.html">Mesh Usage</a> to learn how to upload and apply your own.</p>',15)]))}const m=a(r,[["render",i]]);export{p as __pageData,m as default};
